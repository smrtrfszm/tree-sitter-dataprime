=======
numbers
=======

filter 1234567890
| filter -1237823
| filter 1.23
| filter -1.23

---

(query
  (filter_command
    condition: (number))
  (filter_command
    condition: (number))
  (filter_command
    condition: (number))
  (filter_command
    condition: (number)))

=======
strings
=======

filter ''
| filter 'some string'
| filter '\'\\'
| filter `asdfsadf`
| filter `{asd} asdfsadf`
| filter `empty {}`
| filter `'\`\\\{`

---

(query
  (filter_command
    condition: (string))
  (filter_command
    condition: (string))
  (filter_command
    condition: (string
      (escape_sequence)
      (escape_sequence)))
  (filter_command
    condition: (string_interpolation
      (string_fragment)))
  (filter_command
    condition: (string_interpolation
      (template_substitution
        (key))
      (string_fragment)))
  (filter_command
    condition: (string_interpolation
      (string_fragment)
      (template_substitution)))
  (filter_command
    condition: (string_interpolation
      (string_fragment)
      (escape_sequence)
      (escape_sequence)
      (escape_sequence))))

==========
timestamps
==========

filter @'now'
| filter @'2025-02-16T01:41:07Z'
| filter @123123
| filter @(ts * 1000)
| filter @`2025-{month}`

---

(query
  (filter_command
    condition: (timestamp_literal
      (string)))
  (filter_command
    condition: (timestamp_literal
      (string)))
  (filter_command
    condition: (timestamp_literal
      (number)))
  (filter_command
    condition: (timestamp_literal
      (binary_expression
        left: (key)
        right: (number))))
  (filter_command
    condition: (timestamp_literal
      (string_interpolation
        (string_fragment)
        (template_substitution
          (key))))))

========
keypaths
========

filter path
| filter path.path2.path3.path4
| filter $d.message
| filter $d
| filter path['subpath']

---

(query
  (filter_command
    condition: (key))
  (filter_command
    condition: (field_expression
      expression: (field_expression
        expression: (field_expression
          expression: (key)
          field: (field))
        field: (field))
      field: (field)))
  (filter_command
    condition: (field_expression
      expression: (variable
        (identifier))
      field: (field)))
  (filter_command
    condition: (variable
      (identifier)))
  (filter_command
    condition: (field_expression
      expression: (key)
      field: (string))))

=========
functions
=========

filter function()
| filter function(arg1, arg2)
| filter keypath.subpath.function(arg1, arg2)
| filter $variable.subpath.function(arg1, arg2)
| filter fn().fn()

---

(query
  (filter_command
    condition: (call_expression
      function: (identifier)
      arguments: (arguments)))
  (filter_command
    condition: (call_expression
      function: (identifier)
      arguments: (arguments
        (key)
        (key))))
  (filter_command
    condition: (call_expression
      expression: (field_expression
        expression: (key)
	field: (field))
      function: (identifier)
      arguments: (arguments
        (key)
        (key))))
  (filter_command
    condition: (call_expression
      expression: (field_expression
        expression: (variable
          (identifier))
        field: (field))
      function: (identifier)
      arguments: (arguments
        (key)
        (key))))
  (filter_command
    condition: (call_expression
      expression: (call_expression
        function: (identifier)
        arguments: (arguments))
      function: (identifier)
      arguments: (arguments))))

=========
intervals
=========

filter 1s
| filter 2m
| filter 3h
| filter 4d

---

(query
  (filter_command
    condition: (interval
      (number)
      (interval_unit)))
  (filter_command
    condition: (interval
      (number)
      (interval_unit)))
  (filter_command
    condition: (interval
      (number)
      (interval_unit)))
  (filter_command
    condition: (interval
      (number)
      (interval_unit))))

=========
typecasts
=========

filter path:type
| filter path.path:type

---

(query
  (filter_command
    condition: (type_cast
      keypath: (key)
      type: (type)))
  (filter_command
    condition: (type_cast
      keypath: (field_expression
        expression: (key)
	field: (field))
      type: (type))))

=====
cases
=====

filter case {
  expr -> value,
  expr -> value
}
| filter case_contains {
  value,
  expr -> value
}

---

(query
  (filter_command
    condition: (case
      (case_clause
        value: (key)
        result: (key))
      (case_clause
        value: (key)
        result: (key))))
  (filter_command
    condition: (case
      subject: (key)
      (case_clause
        value: (key)
        result: (key)))))

=========
arguments
=========

filter empty()
| filter single('arg')
| filter multiple('arg1', 2)
| filter singleNamed(name='arg')
| filter multipleNamed(name='arg', nameTwo=2)
| filter both(name='arg1', 2)

---

(query
  (filter_command
    condition: (call_expression
      function: (identifier)
      arguments: (arguments)))
  (filter_command
    condition: (call_expression
      function: (identifier)
      arguments: (arguments
        (string))))
  (filter_command
    condition: (call_expression
      function: (identifier)
      arguments: (arguments
        (string)
        (number))))
  (filter_command
    condition: (call_expression
      function: (identifier)
      arguments: (arguments
        (named_argument
          name: (identifier)
          value: (string)))))
  (filter_command
    condition: (call_expression
      function: (identifier)
      arguments: (arguments
        (named_argument
          name: (identifier)
          value: (string))
        (named_argument
          name: (identifier)
          value: (number)))))
  (filter_command
    condition: (call_expression
      function: (identifier)
      arguments: (arguments
        (named_argument
          name: (identifier)
          value: (string))
        (number)))))
