=======
numbers
=======

filter 1234567890
| filter -1237823
| filter 1.23
| filter -1.23

---

(query
  (filter_command
    condition: (number))
  (filter_command
    condition: (number))
  (filter_command
    condition: (number))
  (filter_command
    condition: (number)))

=======
strings
=======

filter ''
| filter 'some string'
| filter '\'\\'
| filter `asdfsadf`
| filter `{asd} asdfsadf`
| filter `empty {}`
| filter `'\`\\\{`

---

(query
  (filter_command
    condition: (string))
  (filter_command
    condition: (string))
  (filter_command
    condition: (string
      (escape_sequence)
      (escape_sequence)))
  (filter_command
    condition: (string_interpolation
      (string_fragment)))
  (filter_command
    condition: (string_interpolation
      (template_substitution
        (key
	  (identifier)))
      (string_fragment)))
  (filter_command
    condition: (string_interpolation
      (string_fragment)
      (template_substitution)))
  (filter_command
    condition: (string_interpolation
      (string_fragment)
      (escape_sequence)
      (escape_sequence)
      (escape_sequence))))

==========
timestamps
==========

filter @'now'
| filter @'2025-02-16T01:41:07Z'
| filter @123123
| filter @(ts * 1000)
| filter @`2025-{month}`

---

(query
  (filter_command
    condition: (timestamp_literal
      (string)))
  (filter_command
    condition: (timestamp_literal
      (string)))
  (filter_command
    condition: (timestamp_literal
      (number)))
  (filter_command
    condition: (timestamp_literal
      (binary_expression
        left: (key
	  (identifier))
        right: (number))))
  (filter_command
    condition: (timestamp_literal
      (string_interpolation
        (string_fragment)
        (template_substitution
          (key
	    (identifier)))))))

========
keypaths
========

filter path
| filter path.path2.path3.path4
| filter $d.message
| filter $d
| filter path['subpath']
| filter right=>$d

---

(query
  (filter_command
    condition: (key
      (identifier)))
  (filter_command
    condition: (field_expression
      expression: (field_expression
        expression: (field_expression
          expression: (key
	    (identifier))
          field: (field))
        field: (field))
      field: (field)))
  (filter_command
    condition: (field_expression
      expression: (key
        (identifier))
      field: (field)))
  (filter_command
    condition: (key
      (identifier)))
  (filter_command
    condition: (field_expression
      expression: (key
        (identifier))
      field: (string)))
  (filter_command
    condition: (key
      (identifier))))

=========
functions
=========

filter function()
| filter function(arg1, arg2)
| filter keypath.subpath.function(arg1, arg2)
| filter $variable.subpath.function(arg1, arg2)
| filter fn().fn()

---

(query
  (filter_command
    condition: (call_expression
      function: (identifier)
      arguments: (arguments)))
  (filter_command
    condition: (call_expression
      function: (identifier)
      arguments: (arguments
        (key
          (identifier))
        (key
          (identifier)))))
  (filter_command
    condition: (call_expression
      expression: (field_expression
        expression: (key
          (identifier))
        field: (field))
      function: (identifier)
      arguments: (arguments
        (key
	  (identifier))
        (key
	  (identifier)))))
  (filter_command
    condition: (call_expression
      expression: (field_expression
        expression: (key
          (identifier))
        field: (field))
      function: (identifier)
      arguments: (arguments
        (key
	  (identifier))
        (key
	  (identifier)))))
  (filter_command
    condition: (call_expression
      expression: (call_expression
        function: (identifier)
        arguments: (arguments))
      function: (identifier)
      arguments: (arguments))))

=========
intervals
=========

filter 1s
| filter 2m
| filter 3h
| filter 4d
| filter -123d
| filter 7d6h5m4s3ms2us1ns
| filter -32d23h1m12s

---

(query
  (filter_command
    condition: (interval))
  (filter_command
    condition: (interval))
  (filter_command
    condition: (interval))
  (filter_command
    condition: (interval))
  (filter_command
    condition: (interval))
  (filter_command
    condition: (interval))
  (filter_command
    condition: (interval)))

=========
typecasts
=========

filter path:type
| filter path.path:type

---

(query
  (filter_command
    condition: (type_cast
      keypath: (key
        (identifier))
      type: (type)))
  (filter_command
    condition: (type_cast
      keypath: (field_expression
        expression: (key
	  (identifier))
	field: (field))
      type: (type))))

=====
cases
=====

filter case {
  expr -> value,
  expr -> value
}
| filter case_contains {
  value,
  expr -> value
}

---

(query
  (filter_command
    condition: (case
      (case_clause
        value: (key
	  (identifier))
        result: (key
	  (identifier)))
      (case_clause
        value: (key
	  (identifier))
        result: (key
	  (identifier)))))
  (filter_command
    condition: (case
      subject: (key
        (identifier))
      (case_clause
        value: (key
	  (identifier))
        result: (key
	  (identifier))))))

=========
arguments
=========

filter empty()
| filter single('arg')
| filter multiple('arg1', 2)
| filter singleNamed(name='arg')
| filter multipleNamed(name='arg', nameTwo=2)
| filter both(name='arg1', 2)

---

(query
  (filter_command
    condition: (call_expression
      function: (identifier)
      arguments: (arguments)))
  (filter_command
    condition: (call_expression
      function: (identifier)
      arguments: (arguments
        (string))))
  (filter_command
    condition: (call_expression
      function: (identifier)
      arguments: (arguments
        (string)
        (number))))
  (filter_command
    condition: (call_expression
      function: (identifier)
      arguments: (arguments
        (named_argument
          name: (identifier)
          value: (string)))))
  (filter_command
    condition: (call_expression
      function: (identifier)
      arguments: (arguments
        (named_argument
          name: (identifier)
          value: (string))
        (named_argument
          name: (identifier)
          value: (number)))))
  (filter_command
    condition: (call_expression
      function: (identifier)
      arguments: (arguments
        (named_argument
          name: (identifier)
          value: (string))
        (number)))))
